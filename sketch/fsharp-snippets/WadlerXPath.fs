module WadlerXPath

// Unfinished

open Microsoft.FSharp.Collections  // for Set





type Axis =
    | Child
    | Parent
    | Descendant
    | Ancestor
    | Self
    | Attribute
    | Namespace

type Nodetype = 
    | TyAttribute
    | TyElement
    | TyNamespace
    | TyText        // not generated by P matched on in S

type Direction =
    | Forward
    | Reverse

type Node = Node of int * Nodetype    // placeholder

type Context = Node * Set<Node>


type Pattern =
    | Pipe of Pattern * Pattern         // Disjunction "|"
    | Root of Pattern
    | Slash of Pattern * Pattern
    | NodeAxis of Node      // ???? aka [[n]]
    | Wild
    | Text of unit
    // more to do

type Expr = 
    | Plus of Expr * Expr
    | Mult of Expr * Expr
    | Position of unit
    | Last of unit
    | Int of int

type Qualifier = 
    | And of Qualifier * Qualifier
    | Or of Qualifier * Qualifier
    | Not of Qualifier
    | Equal of Qualifier * Qualifier
    | Pattern of Pattern   // placeholder



let nodetype (x:Node) : Nodetype = match x with | Node (_,ty) -> ty

// this is <=doc used by E
let lteDoc (x1:Node) (x2:Node) : bool = 
    match (x1,x2) with
    | Node(a,_), Node (b,_) -> a <= b


// Auxillary functions

// axis i.e. A
let axis (a:Axis) (x:Node) : Set<Node> = 
    match a with
    | Self -> Set.singleton x
    | _ -> failwith "err"


// principal i.e. P
let principal (p:Axis) : Nodetype = 
    match p with
    | Child -> TyElement
    | Parent -> TyElement
    | Descendant -> TyElement
    | Ancestor -> TyElement
    | Self -> TyElement
    | Attribute -> TyAttribute
    | Namespace -> TyNamespace

// principal i.e. D
let direction (d:Axis) : Direction = 
    match d with
    | Child -> Forward
    | Parent -> Reverse
    | Descendant -> Forward
    | Ancestor -> Reverse
    | Self -> Forward
    | Attribute -> Forward
    | Namespace -> Forward


// selected i.e. S
let rec selected1 (a:Axis) (p:Pattern) ((x,eS) : Context) : Set<Node> = 
    match p with
    | Pipe (p1,p2) -> 
        let s1 = selected1 a p1 (x,eS)
        let s2 = selected1 a p2 (x,eS)
        Set.union s1 s2

    | Root p1 -> failwith "err"

    | Slash (p1,p2) -> 
        let s1 = selected1 a p1 (x,eS)
        failwith "err"
    | NodeAxis n -> failwith "err"

    | Wild ->
        let anodes = axis a x
        let typ = principal a
        Set.filter (fun x1 -> nodetype x1 = typ) anodes

    | Text () ->
        let anodes = axis a x
        Set.filter (fun x1 -> nodetype x1 = TyText) anodes 

// qualifier i.e. Q
and qualifier1 (a:Axis) (q:Qualifier) ((x,eS) : Context) : bool = 
    match q with
    | And (q1,q2) -> 
        let b1 = qualifier1 a q1 (x,eS)
        let b2 = qualifier1 a q2 (x,eS)
        b1 && b2

    | Or (q1,q2) -> 
        let b1 = qualifier1 a q1 (x,eS)
        let b2 = qualifier1 a q2 (x,eS)
        b1 || b2

    | Not q1 -> not <| qualifier1 a q1 (x,eS)

    | Equal (q1,q2) -> 
        let b1 = qualifier1 a q1 (x,eS)
        let b2 = qualifier1 a q2 (x,eS)
        b1 = b2

    | Pattern p1 -> let sel1 = selected1 a p1 (x,eS) in not (Set.isEmpty sel1)

// evaluate i.e. E

and evaluate1 (a:Axis) (e:Expr) ((x,eS) : Context) : int = 
    match e with
    | Plus (e1,e2) -> 
        let i1 = evaluate1 a e1 (x,eS)
        let i2 = evaluate1 a e2 (x,eS)                  
        i1 + i2

    | Mult (e1,e2) -> 
        let i1 = evaluate1 a e1 (x,eS)
        let i2 = evaluate1 a e2 (x,eS)                  
        i1 * i2

    | Position () -> 
        let j = let subset = Set.filter (fun x1 -> lteDoc x1 x) eS in subset.Count
        if direction a = Forward then j
        else eS.Count + 1 - j

    | Last () -> eS.Count
    | Int i -> i





    

